import "babel-polyfill";
import Chart from "chart.js";

const currencyURL = "www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml";
const meteoURL = "/xml.meteoservice.ru/export/gismeteo/point/140.xml";
 
 async function loadWeather() {
  const responseWe = await fetch(meteoURL);//отправили запрос
  const xmlWe = await responseWe.text();//promise
  const parserWe = new DOMParser();//object domprser
  const WeatherData = parserWe.parseFromString(xmlWe, "text/xml");//return xml-doc
   // <TEMPERATURE max="6" min="2"/>
    const tempr = WeatherData.querySelectorAll("TEMPERATURE[max][min]");//");//array of selectors
	const timehour=WeatherData.querySelectorAll("FORECAST[hour]");
    const resultTempr = Object.create(null);
  for (let i = 0; i < tempr.length; i++) {
	const hourTag = timehour[i];
	const hour=hourTag.getAttribute("hour");
	//console.log(hour);
	const temprTag = tempr[i];
	const max = temprTag.getAttribute("max"); const min = temprTag.getAttribute("min");
   	const averTemp=(Number(max)+Number(min))/2;
	console.log(averTemp);
    resultTempr[i] = averTemp;
	
  }
     //result["EUR"] = 1;//???????????
  // result["RANDOM"] = 1 + Math.random();
  return result;

}
 // console.log(resultTemp[0]);
 
 

 
async function loadCurrency() {
  const response = await fetch(currencyURL);//отправили запрос
  const xmlTest = await response.text();//promise
  const parser = new DOMParser();//object domprser
  const currencyData = parser.parseFromString(xmlTest, "text/xml");//return html-doc
  // <Cube currency="USD" rate="1.1321" />
      
  const rates = currencyData.querySelectorAll("Cube[currency][rate]");//array of selectors
  const result = Object.create(null);
   
  for (let i = 0; i < rates.length; i++) {
	const rateTag = rates[i];
	const rate = rateTag.getAttribute("rate");
    const currency = rateTag.getAttribute("currency");
    result[currency] = rate;
  }
     result["EUR"] = 1;//???????????
  // result["RANDOM"] = 1 + Math.random();
  return result;
}


function normalizeDataByCurrency(data, currency) {
  const result = Object.create(null);
  const value = data[currency];
  console.log("val",value);
  for (const key of Object.keys(data)) {
    result[key] = value / data[key];
	console.log(result[key]);
	
  }
  return result;
}

const buttonBuild = document.getElementById("btn");
const canvasCtx = document.getElementById("out").getContext("2d");


buttonBuild.addEventListener("click", async function() {
   
   //const WeatherData = await loadWeather();
 
 const currencyData = await loadCurrency();
 const normalData = normalizeDataByCurrency(currencyData, "RUB");
 //const keys = Object.keys(normalData).sort((k1, k2) =>  compare(normalData[k1], normalData[k2]));
 const keys = Object.keys(normalData);
     
  const plotData = keys.map(key => normalData[key]);
  const chartConfig = {
    type: "line",

    data: {
      labels: keys,
      datasets: [
        {
          label: "Стоимость валюты в рублях",
          backgroundColor: "rgb(255, 200, 20)",
          borderColor: "rgb(0, 0, 0)",
          data: plotData
		   
        },
		{
          label: "Температура по ощущениям",
          backgroundColor: "rgb(055, 200, 20)",
          borderColor: "rgb(0, 0, 0)",
          data: [-1.5,-6.5,-1.5,10.5],
		}
			
      ]
	  
    }
	
	
	
  };

  
  if (window.chart) {
    chart.data.labels = chartConfig.data.labels;
    chart.data.datasets[0].data = chartConfig.data.datasets[0].data;
    chart.update({
      duration: 800,
      easing: "easeOutBounce"
    });
  } else {
    window.chart = new Chart(canvasCtx, chartConfig);
  }
});

function compare(a, b) {
  if (a > b) return 1;
  if (a < b) return -1;
  return 0;
}
